diff --git a/WORKSPACE b/WORKSPACE
index 7e9db5ff5..03b300890 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -32,16 +32,16 @@ load("@toolchains_llvm//toolchain:deps.bzl", "bazel_toolchain_dependencies")
 
 bazel_toolchain_dependencies()
 
-load("@toolchains_llvm//toolchain:rules.bzl", "llvm_toolchain")
+#load("@toolchains_llvm//toolchain:rules.bzl", "llvm_toolchain")
 
-llvm_toolchain(
-    name = "llvm_toolchain",
-    llvm_version = "17.0.2",
-)
+#llvm_toolchain(
+#    name = "llvm_toolchain",
+#    llvm_version = "17.0.2",
+#)
 
-load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")
+#load("@llvm_toolchain//:toolchains.bzl", "llvm_register_toolchains")
 
-llvm_register_toolchains()
+#llvm_register_toolchains()
 
 load("//dependency_support:load_external.bzl", "load_external_repositories")
 
diff --git a/xls/build_rules/xls_ir_rules.bzl b/xls/build_rules/xls_ir_rules.bzl
index 378c47233..3b620dfc5 100644
--- a/xls/build_rules/xls_ir_rules.bzl
+++ b/xls/build_rules/xls_ir_rules.bzl
@@ -1095,21 +1095,14 @@ def _xls_ir_cc_library_impl(ctx):
     # Source files (.h and .cc) files are first generated unformatted, then
     # formatted with clangformat.
     object_file = ctx.actions.declare_file(ctx.outputs.object_file.basename)
-    unformatted_header_file = ctx.actions.declare_file(
-        ctx.outputs.header_file.basename + ".unformatted",
-    )
-    unformatted_source_file = ctx.actions.declare_file(
-        ctx.outputs.source_file.basename + ".unformatted",
-    )
-
     header_file = ctx.actions.declare_file(ctx.outputs.header_file.basename)
     source_file = ctx.actions.declare_file(ctx.outputs.source_file.basename)
 
     aot_compiler_args = ctx.actions.args()
     aot_compiler_args.add("-input", src)
-    aot_compiler_args.add("-output_header", unformatted_header_file.path)
+    aot_compiler_args.add("-output_header", header_file.path)
     aot_compiler_args.add("-output_object", object_file.path)
-    aot_compiler_args.add("-output_source", unformatted_source_file.path)
+    aot_compiler_args.add("-output_source", source_file.path)
     aot_compiler_args.add("-header_include_path", header_file.short_path)
 
     if ctx.attr.with_msan:
@@ -1126,7 +1119,7 @@ def _xls_ir_cc_library_impl(ctx):
     runfiles = get_runfiles_for_xls(ctx, [aot_compiler_tool_runfiles], [src])
 
     ctx.actions.run(
-        outputs = [object_file, unformatted_header_file, unformatted_source_file],
+        outputs = [object_file, header_file, source_file],
         tools = [aot_compiler_tool],
         inputs = runfiles.files,
         arguments = [aot_compiler_args],
@@ -1136,32 +1129,6 @@ def _xls_ir_cc_library_impl(ctx):
         toolchain = None,
     )
 
-    ctx.actions.run_shell(
-        inputs = [unformatted_header_file],
-        outputs = [header_file],
-        tools = [ctx.executable._clang_format],
-        progress_message = "Formatting %s" % header_file.basename,
-        command = "{clang_format} {unformatted} > {formatted}".format(
-            clang_format = ctx.executable._clang_format.path,
-            unformatted = unformatted_header_file.path,
-            formatted = header_file.path,
-        ),
-        toolchain = None,
-    )
-
-    ctx.actions.run_shell(
-        inputs = [unformatted_source_file],
-        outputs = [source_file],
-        tools = [ctx.executable._clang_format],
-        progress_message = "Formatting %s" % source_file.basename,
-        command = "{clang_format} {unformatted} > {formatted}".format(
-            clang_format = ctx.executable._clang_format.path,
-            unformatted = unformatted_source_file.path,
-            formatted = source_file.path,
-        ),
-        toolchain = None,
-    )
-
     return [
         DefaultInfo(
             files = depset(
@@ -1203,12 +1170,6 @@ xls_ir_cc_library = rule(
                 doc = "Comma-separated list of nested namespaces in which to " +
                       "place the generated function.",
             ),
-            "_clang_format": attr.label(
-                executable = True,
-                allow_files = True,
-                cfg = "exec",
-                default = Label("@llvm_toolchain//:clang-format"),
-            ),
             "with_msan": attr.bool(
                 doc = "if the jit code should be compiled with msan",
                 mandatory = True,
diff --git a/xls/delay_model/build_defs.bzl b/xls/delay_model/build_defs.bzl
index 1d4e55cda..441cc402c 100644
--- a/xls/delay_model/build_defs.bzl
+++ b/xls/delay_model/build_defs.bzl
@@ -47,11 +47,9 @@ def delay_model(
         outs = ["{}.cc".format(name)],
         cmd = ("$(location //xls/delay_model:generate_delay_lookup) " +
                "--model_name={model_name} --precedence={precedence} $< " +
-               "| $(location @llvm_toolchain//:clang-format)" +
                " > $(OUTS)").format(model_name = model_name, precedence = precedence),
         tools = [
             "//xls/delay_model:generate_delay_lookup",
-            "@llvm_toolchain//:clang-format",
         ],
         **kwargs
     )
diff --git a/xls/ir/BUILD b/xls/ir/BUILD
index 185424a79..31037c139 100644
--- a/xls/ir/BUILD
+++ b/xls/ir/BUILD
@@ -1051,11 +1051,9 @@ genrule(
     srcs = ["op_header.tmpl"],
     outs = ["op.h"],
     cmd = "$(location :render_specification_against_template) $(location :op_header.tmpl)" +
-          " | $(location @llvm_toolchain//:clang-format)" +
           " > $(OUTS)",
     tools = [
         ":render_specification_against_template",
-        "@llvm_toolchain//:clang-format",
     ],
 )
 
@@ -1089,11 +1087,9 @@ genrule(
     srcs = ["op_source.tmpl"],
     outs = ["op.cc"],
     cmd = "$(location :render_specification_against_template) $(location :op_source.tmpl)" +
-          " | $(location @llvm_toolchain//:clang-format)" +
           " > $(OUTS)",
     tools = [
         ":render_specification_against_template",
-        "@llvm_toolchain//:clang-format",
     ],
 )
 
@@ -1102,11 +1098,9 @@ genrule(
     srcs = ["nodes_header.tmpl"],
     outs = ["nodes.h"],
     cmd = "$(location :render_specification_against_template) $(location :nodes_header.tmpl)" +
-          " | $(location @llvm_toolchain//:clang-format)" +
           " > $(OUTS)",
     tools = [
         ":render_specification_against_template",
-        "@llvm_toolchain//:clang-format",
     ],
 )
 
@@ -1115,11 +1109,9 @@ genrule(
     srcs = ["nodes_source.tmpl"],
     outs = ["nodes.cc"],
     cmd = "$(location :render_specification_against_template) $(location :nodes_source.tmpl)" +
-          " | $(location @llvm_toolchain//:clang-format)" +
           " > $(OUTS)",
     tools = [
         ":render_specification_against_template",
-        "@llvm_toolchain//:clang-format",
     ],
 )
 
